@startuml

package factory <<Folder>> {
	abstract class Part {
		{abstract} float calculateSpec()
		{abstract} Part makePart(String name)
	}

	abstract class Cpu {
		float coreClock
		int coreCount

		float calculateSpec()
		{abstract} Part makePart(String name)
	}

	abstract class Ram {
		int size
		int count

		float calculateSpec()
		{abstract} Part makePart(String name)
	}

	abstract class Computer {
		Cpu cpu
		List<Ram> ram

		float calculateSpec()
		{abstract} Computer makeComputer(Cpu cpu, Ram ram)
	}

	abstract class Factory {
		{static} getFactory(Class factoryClass)

		{abstract} Computer createComputer()
		{abstract} Cpu createCpu()
		{abstract} Ram createRam()
	}
}

package excellent <<folder>> {
	class ExcellentCpu {
		Part makePart()
	}

	class ExcellentRam {
		Part makeRam()
	}

	class ExcellentComputer {
		Computer makeComputer(Cpu cpu, Ram ram)
	}

	class ExcellentFactory {
		Computer createComputer()
		Cpu createCpu()
		Ram createRam()
	}
}

Factory <|-- ExcellentFactory
Part <|-down- Cpu
Part <|-down- Ram
Cpu <|-- ExcellentCpu
Ram <|-- ExcellentRam
Computer <|-down- ExcellentComputer

Cpu <-down- Factory : < Creates
Ram <-down- Factory : < Creates
Computer <-down- Factory : < Creates

ExcellentCpu <-- ExcellentFactory : < Creates
ExcellentRam <-- ExcellentFactory : < Creates
ExcellentComputer <-- ExcellentFactory : < Creates



@enduml